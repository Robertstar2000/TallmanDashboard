import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
// --- Configuration ---
// @ts-ignore - Suppress import.meta error for this script
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');
const jsonInputPath = path.resolve(projectRoot, '..', '..', 'Desktop', 'dashboard_data.json');
const tsOutputPath = path.resolve(projectRoot, 'lib', 'db', 'single-source-data.ts');
// --- Main Script Logic ---
function rebuildSingleSourceData() {
    console.log('Starting rebuild process (JSON only)...');
    try {
        // 1. Read full JSON data
        console.log(`Reading full data from ${jsonInputPath}...`);
        if (!fs.existsSync(jsonInputPath)) {
            throw new Error(`Input JSON file not found: ${jsonInputPath}`);
        }
        const jsonDataString = fs.readFileSync(jsonInputPath, 'utf-8');
        const fullJsonData = JSON.parse(jsonDataString);
        console.log(`Read ${fullJsonData.length} items from JSON.`);
        // 2. Convert data from JSON
        console.log('Converting data from JSON structure...');
        const convertedData = fullJsonData.map((jsonItem) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            const stringId = String(jsonItem.id); // Ensure ID is string
            // Use SQL expression directly from JSON
            const sqlExpression = (_a = jsonItem.sqlExpression) !== null && _a !== void 0 ? _a : `-- SQL for ${stringId} not found`;
            // Adjust table name for POR server
            let tableName = jsonItem.tableName;
            if (jsonItem.serverName === 'POR' && (tableName === null || tableName === void 0 ? void 0 : tableName.startsWith('dbo.'))) {
                tableName = tableName.substring(4); // Remove 'dbo.'
            }
            // Attempt to parse value as number, default to null if invalid or missing
            const rawValue = jsonItem.value;
            const parsedValue = (rawValue !== null && rawValue !== undefined && String(rawValue).trim() !== '')
                ? parseFloat(String(rawValue))
                : NaN;
            const finalValue = isNaN(parsedValue) ? null : parsedValue;
            // Construct the final ChartDataRow object
            // Ensure this structure EXACTLY matches the imported ChartDataRow type
            return {
                id: stringId, // from json, as string
                rowId: stringId, // Use same ID for rowId for now
                DataPoint: (_b = jsonItem.DataPoint) !== null && _b !== void 0 ? _b : '', // from json
                chartGroup: (_c = jsonItem.chartGroup) !== null && _c !== void 0 ? _c : '', // from json
                variableName: (_d = jsonItem.variableName) !== null && _d !== void 0 ? _d : '', // from json
                chartName: (_e = jsonItem.chartName) !== null && _e !== void 0 ? _e : null, // from json
                serverName: (_f = jsonItem.serverName) !== null && _f !== void 0 ? _f : 'P21', // from json, default P21
                tableName: tableName !== null && tableName !== void 0 ? tableName : '', // from json, adjusted
                productionSqlExpression: sqlExpression, // from json
                value: finalValue, // from json, parsed
                lastUpdated: (_g = jsonItem.lastUpdated) !== null && _g !== void 0 ? _g : null, // from json
                calculationType: (_h = jsonItem.calculation) !== null && _h !== void 0 ? _h : null, // from json (map calculation -> calculationType)
                axisStep: (_j = jsonItem.axisStep) !== null && _j !== void 0 ? _j : null, // from json
            };
        });
        console.log(`Converted data contains ${convertedData.length} items.`);
        // 3. Generate TS Code string
        console.log('Generating TypeScript file content...');
        // Import the type relative to the *final location* of the TS file
        const tsContent = `// Generated by scripts/rebuild-single-source.ts
// Do not edit this file manually.

import { ChartDataRow } from './types.js'; // Use actual type import

// Data converted directly from dashboard_data.json
export const singleSourceData: ChartDataRow[] = ${JSON.stringify(convertedData, null, 2)};

// --- Placeholder exports (as in original file) ---
export const dashboardData = [];
export const chartGroupSettings = {};
export const serverConfigs = {};
`;
        // 4. Write output TS file
        console.log(`Writing updated data to ${tsOutputPath}...`);
        fs.writeFileSync(tsOutputPath, tsContent, 'utf-8');
        console.log('Rebuild process completed successfully!');
    }
    catch (error) {
        console.error('Error during rebuild process:', error);
        process.exit(1); // Exit with error code
    }
}
rebuildSingleSourceData();
