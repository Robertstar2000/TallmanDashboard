# PowerShell script to create a new complete-chart-data.ts file with proper POR SQL expressions
# This approach avoids regex issues by creating a new file from scratch

$originalFilePath = "C:\Users\BobM\CascadeProjects\TallmanDashboard_new\lib\db\complete-chart-data.ts"
$backupPath = "C:\Users\BobM\CascadeProjects\TallmanDashboard_new\lib\db\complete-chart-data.ts.bak"
$newFilePath = "C:\Users\BobM\CascadeProjects\TallmanDashboard_new\lib\db\complete-chart-data.new.ts"

# Create a backup of the original file
if (-not (Test-Path $backupPath)) {
    Copy-Item -Path $originalFilePath -Destination $backupPath
    Write-Host "Created backup at $backupPath"
}

# Define the correct MS Access/Jet SQL syntax for each metric type
$newRentalsSql = "SELECT Count(*) as value FROM Transactions WHERE Month(DateCreated) = {0} AND Year(DateCreated) = Year(Date())"
$openRentalsSql = "SELECT Count(*) as value FROM Transactions WHERE TransactionStatus IN ('Open', 'Active', 'Out')"
$openRentalsMonthSql = "SELECT Count(*) as value FROM Transactions WHERE TransactionStatus IN ('Open', 'Active', 'Out') AND Month(DateCreated) = {0}"
$rentalValueSql = "SELECT Sum(TotalAmount) as value FROM Transactions WHERE TransactionStatus IN ('Open', 'Active', 'Out')"
$rentalValueMonthSql = "SELECT Sum(TotalAmount) as value FROM Transactions WHERE TransactionStatus IN ('Open', 'Active', 'Out') AND Month(DateCreated) = {0}"

# Define month mappings
$monthMap = @{
    "Jan" = 1; "Feb" = 2; "Mar" = 3; "Apr" = 4; "May" = 5; "Jun" = 6;
    "Jul" = 7; "Aug" = 8; "Sep" = 9; "Oct" = 10; "Nov" = 11; "Dec" = 12
}

# Create a new file with the header
$fileHeader = @"
import type { SpreadsheetRow } from './types';

// This file was auto-generated by the generate-complete-chart-data.js script
// Last updated: $(Get-Date -Format "yyyy-MM-ddTHH:mm:ss.fffZ")

export const initialSpreadsheetData: SpreadsheetRow[] = [
"@

Set-Content -Path $newFilePath -Value $fileHeader

# Process the original file line by line
$inDataArray = $false
$currentItem = ""
$itemCount = 0
$porCount = 0

foreach ($line in Get-Content $originalFilePath) {
    # Check if we're entering the data array
    if ($line -match 'export const initialSpreadsheetData: SpreadsheetRow\[\] = \[') {
        $inDataArray = $true
        continue
    }
    
    # Check if we're exiting the data array
    if ($inDataArray -and $line -match '^\];') {
        $inDataArray = $false
        continue
    }
    
    # Process lines within the data array
    if ($inDataArray) {
        # Add the line to the current item
        $currentItem += "$line`n"
        
        # Check if this is the end of an item
        if ($line -match '^\s*},\s*$') {
            # Process the item if it's complete
            if ($currentItem -match '"serverName":\s*"POR"') {
                # This is a POR item, update its SQL
                $porCount++
                
                # Extract the DataPoint
                if ($currentItem -match '"DataPoint":\s*"([^"]+)"') {
                    $dataPoint = $matches[1]
                    
                    # Update tableName to Transactions
                    $currentItem = $currentItem -replace '"tableName":\s*"Rentals"', '"tableName": "Transactions"'
                    
                    # Update the SQL expression based on the DataPoint
                    if ($dataPoint -match "POR Overview New Rentals, (\w+)") {
                        $month = $matches[1]
                        $monthNum = $monthMap[$month]
                        $sql = $newRentalsSql -f $monthNum
                        $currentItem = $currentItem -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                    }
                    elseif ($dataPoint -match "POR Overview Open Rentals, (\w+)") {
                        $month = $matches[1]
                        $monthNum = $monthMap[$month]
                        $sql = $openRentalsMonthSql -f $monthNum
                        $currentItem = $currentItem -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                    }
                    elseif ($dataPoint -eq "POR Overview Open Rentals") {
                        $sql = $openRentalsSql
                        $currentItem = $currentItem -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                    }
                    elseif ($dataPoint -match "POR Overview Rental Value, (\w+)") {
                        $month = $matches[1]
                        $monthNum = $monthMap[$month]
                        $sql = $rentalValueMonthSql -f $monthNum
                        $currentItem = $currentItem -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                    }
                    elseif ($dataPoint -eq "POR Overview Rental Value") {
                        $sql = $rentalValueSql
                        $currentItem = $currentItem -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                    }
                    
                    # Update the lastUpdated timestamp
                    $timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
                    $currentItem = $currentItem -replace '"lastUpdated":\s*"[^"]+"', "`"lastUpdated`": `"$timestamp`""
                }
            }
            
            # Write the item to the new file
            Add-Content -Path $newFilePath -Value $currentItem
            $currentItem = ""
            $itemCount++
            
            # Only process the first instance of the data array
            if ($itemCount -ge 174) {
                $inDataArray = $false
            }
        }
    }
}

# Add the footer
$fileFooter = @"
];

// Export the combined data
export const combinedData = [...initialSpreadsheetData];
"@

Add-Content -Path $newFilePath -Value $fileFooter

Write-Host "Created new file with $itemCount total items and updated $porCount POR entries"

# Replace the original file with the new one
Copy-Item -Path $newFilePath -Destination $originalFilePath -Force
Write-Host "Replaced original file with the fixed version"

# Clean up the temporary file
Remove-Item -Path $newFilePath
Write-Host "Cleaned up temporary files"

Write-Host "Complete-chart-data.ts has been fixed with proper POR SQL expressions!"
