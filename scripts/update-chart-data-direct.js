// Script to update complete-chart-data.ts file with data from MasterSQLTable.csv
const fs = require('fs');
const path = require('path');

// File paths
const csvFilePath = path.join(__dirname, 'MasterSQLTable.csv');
const outputFilePath = path.join(__dirname, '..', 'lib', 'db', 'complete-chart-data.ts');
const backupFilePath = path.join(__dirname, '..', 'lib', 'db', 'complete-chart-data.backup.ts');

console.log(`Reading CSV data from: ${csvFilePath}`);
console.log(`Output will be written to: ${outputFilePath}`);
console.log(`Backup will be created at: ${backupFilePath}`);

try {
  // Read the CSV file
  const csvData = fs.readFileSync(csvFilePath, 'utf8');
  
  // Read the current complete-chart-data.ts file
  const currentFileContent = fs.readFileSync(outputFilePath, 'utf8');
  
  // Create a backup of the current file
  fs.writeFileSync(backupFilePath, currentFileContent);
  console.log('Created backup of original file');
  
  // Extract the header and footer from the current file
  const headerMatch = currentFileContent.match(/^(import.*?\n\n\/\/.*?\n\/\/.*?\n\nexport const initialSpreadsheetData)/s);
  const header = headerMatch ? headerMatch[1] : 'import type { SpreadsheetRow } from \'./types\';\n\n// This file was auto-generated by update-chart-data-direct.js script\n// Last updated: ' + new Date().toISOString() + '\n\nexport const initialSpreadsheetData';
  
  const footerMatch = currentFileContent.match(/(\/\/ Export.*?\];)$/s);
  const footer = footerMatch ? footerMatch[1] : '\n\n// Export the combined data\nexport const combinedData = [...initialSpreadsheetData];\n';
  
  // Parse the CSV data
  const lines = csvData.split('\n').filter(line => line.trim() !== '');
  console.log(`Found ${lines.length} lines in CSV file`);
  
  // Parse the header line
  const headerLine = lines[0];
  const headerFields = headerLine.split(',').map(field => field.replace(/\t/g, '').trim());
  console.log('CSV Headers:', headerFields);
  
  // Map header indices
  const idIndex = headerFields.findIndex(field => field === 'ID');
  const nameIndex = headerFields.findIndex(field => field === 'Name');
  const chartGroupIndex = headerFields.findIndex(field => field === 'Chart Group');
  const variableNameIndex = headerFields.findIndex(field => field === 'Variable Name');
  const serverNameIndex = headerFields.findIndex(field => field === 'Server Name');
  const valueIndex = headerFields.findIndex(field => field === 'Value');
  const tableNameIndex = headerFields.findIndex(field => field === 'Table Name');
  const sqlExpressionIndex = headerFields.findIndex(field => field === 'SQL Expression');
  const productionSqlExpressionIndex = headerFields.findIndex(field => field === 'Production SQL Expression');
  
  console.log('Field indices:', {
    idIndex,
    nameIndex,
    chartGroupIndex,
    variableNameIndex,
    serverNameIndex,
    valueIndex,
    tableNameIndex,
    sqlExpressionIndex,
    productionSqlExpressionIndex
  });
  
  // Process data lines
  const records = [];
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i];
    const fields = line.split(',');
    
    // Clean up fields
    const cleanFields = fields.map(field => field.replace(/\t/g, '').trim());
    
    // Extract values
    const id = cleanFields[idIndex] || '';
    const name = cleanFields[nameIndex] || '';
    const chartGroup = cleanFields[chartGroupIndex] || '';
    const variableName = cleanFields[variableNameIndex] || '';
    const serverName = cleanFields[serverNameIndex] || '';
    const value = "0"; // Set all value fields to "0"
    let tableName = cleanFields[tableNameIndex] || 'TBD';
    const sqlExpression = cleanFields[sqlExpressionIndex] || '';
    const productionSqlExpression = cleanFields[productionSqlExpressionIndex] || '';
    
    // Format the name and variable name
    const formattedName = name.trim();
    const formattedVariableName = variableName.trim();
    
    // Set server name based on chart group and data point
    let updatedServerName = "P21";
    
    // Set server name to "POR" for POR Overview rows and POR Historical Data rows
    if (chartGroup === "POR Overview" || 
        (chartGroup === "Historical Data" && formattedName.includes("POR"))) {
      updatedServerName = "POR";
    }
    
    // Format the DataPoint to separate variable name from time axis with a comma
    let formattedDataPoint = formattedName;
    
    // Check if the name contains a month abbreviation at the end
    const monthAbbreviations = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    for (const month of monthAbbreviations) {
      if (formattedName.endsWith(month)) {
        formattedDataPoint = formattedName.substring(0, formattedName.length - month.length).trim() + ', ' + month;
        break;
      }
    }
    
    // Check for other time-based suffixes (like days of week, quarters, etc.)
    const timePatterns = [
      { pattern: /(\d+)$/, format: (match) => `, ${match}` },
      { pattern: /(Today-\d+)$/, format: (match) => `, ${match}` },
      { pattern: /(Q[1-4])$/, format: (match) => `, ${match}` },
      { pattern: /(Week \d+)$/, format: (match) => `, ${match}` }
    ];
    
    if (!monthAbbreviations.some(month => formattedName.endsWith(month))) {
      for (const { pattern, format } of timePatterns) {
        const match = formattedName.match(pattern);
        if (match) {
          const timePart = match[1];
          formattedDataPoint = formattedName.substring(0, formattedName.length - timePart.length).trim() + format(timePart);
          break;
        }
      }
    }
    
    // Set calculation type (default to "number")
    const calculation = "number";
    
    // Set the lastUpdated timestamp
    const lastUpdated = new Date().toISOString();
    
    // Generate SQL expression based on server and determine appropriate table name
    let generatedSqlExpression = '';
    let appropriateTableName = 'Unknown';
    
    // Determine if this is a P21 or POR record based on ID range and server name
    const isPOR = (parseInt(id) >= 127 && parseInt(id) <= 174) || serverName === 'POR';
    
    if (isPOR) {
      // POR Database (MS Access) SQL syntax
      // Determine table name based on chart group
      if (chartGroup === 'Accounts') {
        appropriateTableName = 'AccountsData';
        if (formattedName.includes('Payable')) {
          generatedSqlExpression = `SELECT Sum(Amount) as value FROM AccountsData WHERE Type = 'Payable' AND DatePart('m', [TransactionDate]) = ${getMonthNumber(serverName)}`;
        } else if (formattedName.includes('Receivable')) {
          generatedSqlExpression = `SELECT Sum(Amount) as value FROM AccountsData WHERE Type = 'Receivable' AND DatePart('m', [TransactionDate]) = ${getMonthNumber(serverName)}`;
        } else if (formattedName.includes('Overdue')) {
          generatedSqlExpression = `SELECT Sum(Amount) as value FROM AccountsData WHERE Type = 'Overdue' AND DatePart('m', [TransactionDate]) = ${getMonthNumber(serverName)}`;
        }
      } else if (chartGroup === 'Customer Metrics') {
        appropriateTableName = 'Customers';
        if (formattedName.includes('New')) {
          generatedSqlExpression = `SELECT Count(*) as value FROM Customers WHERE Status = 'New' AND DatePart('m', [CreatedDate]) = ${getMonthNumber(serverName)}`;
        } else if (formattedName.includes('Prospects')) {
          generatedSqlExpression = `SELECT Count(*) as value FROM Customers WHERE Status = 'Prospect' AND DatePart('m', [CreatedDate]) = ${getMonthNumber(serverName)}`;
        }
      } else if (chartGroup === 'POR Overview') {
        appropriateTableName = 'Rentals';
        if (formattedName.includes('New Rentals')) {
          generatedSqlExpression = `SELECT Count(*) as value FROM Rentals WHERE Status = 'New' AND DatePart('m', [RentalDate]) = ${getMonthNumber(serverName)} AND DatePart('yyyy', [RentalDate]) = DatePart('yyyy', Now())`;
        } else if (formattedName.includes('Open Rentals')) {
          generatedSqlExpression = `SELECT Count(*) as value FROM Rentals WHERE Status = 'Open' AND DatePart('m', [RentalDate]) = ${getMonthNumber(serverName)}`;
        } else if (formattedName.includes('Rental Value')) {
          generatedSqlExpression = `SELECT Sum(RentalValue) as value FROM Rentals WHERE DatePart('m', [RentalDate]) = ${getMonthNumber(serverName)}`;
        }
      } else if (chartGroup === 'Historical Data') {
        appropriateTableName = 'HistoricalData';
        if (formattedName.includes('POR')) {
          generatedSqlExpression = `SELECT Sum(Amount) as value FROM HistoricalData WHERE Source = 'POR' AND DatePart('m', [RecordDate]) = ${getMonthNumber(serverName)}`;
        }
      } else if (chartGroup === 'Daily Orders') {
        appropriateTableName = 'Orders';
        generatedSqlExpression = `SELECT Count(*) as value FROM Orders WHERE DateDiff('d', [OrderDate], Now()) = ${getDayOffset(formattedName)}`;
      } else if (chartGroup === 'Web Orders') {
        appropriateTableName = 'Orders';
        generatedSqlExpression = `SELECT Count(*) as value FROM Orders WHERE Source = 'Web' AND DatePart('m', [OrderDate]) = ${getMonthNumber(serverName)}`;
      } else {
        // Default POR SQL for other chart groups
        generatedSqlExpression = `SELECT Count(*) as value FROM ${chartGroup.replace(/\s+/g, '')} WHERE DatePart('m', [RecordDate]) = ${getMonthNumber(serverName)}`;
      }
    } else {
      // P21 Database (SQL Server) SQL syntax
      if (chartGroup === 'AR Aging') {
        appropriateTableName = 'dbo.ar_open_items';
        if (formattedName.includes('1-30 Days')) {
          generatedSqlExpression = `SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) BETWEEN 1 AND 30`;
        } else if (formattedName.includes('31-60 Days')) {
          generatedSqlExpression = `SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) BETWEEN 31 AND 60`;
        } else if (formattedName.includes('61-90 Days')) {
          generatedSqlExpression = `SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) BETWEEN 61 AND 90`;
        } else if (formattedName.includes('90+ Days')) {
          generatedSqlExpression = `SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) > 90`;
        } else if (formattedName.includes('Current')) {
          generatedSqlExpression = `SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE due_date >= GETDATE()`;
        }
      } else if (chartGroup === 'Accounts') {
        if (formattedName.includes('Payable')) {
          appropriateTableName = 'dbo.customer';
          generatedSqlExpression = `SELECT COUNT(*) * 1000 AS value FROM dbo.customer WITH (NOLOCK) WHERE MONTH(date_created) = ${getMonthNumber(serverName)}`;
        } else if (formattedName.includes('Receivable')) {
          appropriateTableName = 'dbo.customer';
          generatedSqlExpression = `SELECT SUM(credit_limit) AS value FROM dbo.customer WITH (NOLOCK) WHERE MONTH(date_created) = ${getMonthNumber(serverName)}`;
        } else if (formattedName.includes('Overdue')) {
          appropriateTableName = 'dbo.customer';
          generatedSqlExpression = `SELECT SUM(credit_limit_used) AS value FROM dbo.customer WITH (NOLOCK) WHERE credit_limit_used > 0 AND MONTH(date_created) = ${getMonthNumber(serverName)}`;
        }
      } else if (chartGroup === 'Customer Metrics') {
        appropriateTableName = 'dbo.customer';
        if (formattedName.includes('New')) {
          generatedSqlExpression = `SELECT COUNT(*) as value FROM dbo.customer WITH (NOLOCK) WHERE MONTH(create_date) = ${getMonthNumber(serverName)} AND YEAR(create_date) = YEAR(GETDATE())`;
        } else if (formattedName.includes('Prospects')) {
          generatedSqlExpression = `SELECT COUNT(*) as value FROM dbo.customer WITH (NOLOCK) WHERE cust_type = 'Prospect' AND MONTH(create_date) = ${getMonthNumber(serverName)}`;
        }
      } else if (chartGroup === 'Daily Orders') {
        appropriateTableName = 'dbo.oe_hdr';
        generatedSqlExpression = `SELECT COUNT(*) as value FROM dbo.oe_hdr WITH (NOLOCK) WHERE DATEDIFF(day, order_date, GETDATE()) = ${getDayOffset(formattedName)}`;
      } else if (chartGroup === 'Historical Data') {
        appropriateTableName = 'dbo.oe_hdr';
        if (formattedName.includes('P21')) {
          generatedSqlExpression = `SELECT COUNT(*) as value FROM dbo.oe_hdr WITH (NOLOCK) WHERE MONTH(order_date) = ${getMonthNumber(serverName)}`;
        }
      } else if (chartGroup === 'Inventory') {
        appropriateTableName = 'dbo.inv_mast';
        if (formattedName.includes('In Stock')) {
          generatedSqlExpression = `SELECT SUM(qty_on_hand) as value FROM dbo.inv_mast WITH (NOLOCK) WHERE dept_code = '${formattedName.split('Dept ')[1]}'`;
        } else if (formattedName.includes('On Order')) {
          generatedSqlExpression = `SELECT SUM(qty_on_order) as value FROM dbo.inv_mast WITH (NOLOCK) WHERE dept_code = '${formattedName.split('Dept ')[1]}'`;
        }
      } else if (chartGroup === 'Key Metrics') {
        if (formattedName.includes('Open Orders')) {
          appropriateTableName = 'dbo.oe_hdr';
          generatedSqlExpression = `SELECT COUNT(*) as value FROM dbo.oe_hdr WITH (NOLOCK) WHERE order_status = 'Open'`;
        } else if (formattedName.includes('Open Invoices')) {
          appropriateTableName = 'dbo.invoice_hdr';
          generatedSqlExpression = `SELECT COUNT(*) as value FROM dbo.invoice_hdr WITH (NOLOCK) WHERE status = 'Open'`;
        } else if (formattedName.includes('Revenue')) {
          appropriateTableName = 'dbo.invoice_hdr';
          generatedSqlExpression = `SELECT SUM(total_amt) as value FROM dbo.invoice_hdr WITH (NOLOCK) WHERE MONTH(invoice_date) = MONTH(GETDATE()) AND YEAR(invoice_date) = YEAR(GETDATE())`;
        }
      } else if (chartGroup === 'Web Orders') {
        appropriateTableName = 'dbo.oe_hdr';
        generatedSqlExpression = `SELECT COUNT(*) as value FROM dbo.oe_hdr WITH (NOLOCK) WHERE order_source = 'Web' AND MONTH(order_date) = ${getMonthNumber(serverName)}`;
      } else {
        // Default P21 SQL for other chart groups
        generatedSqlExpression = `SELECT COUNT(*) as value FROM dbo.${chartGroup.replace(/\s+/g, '_').toLowerCase()} WITH (NOLOCK) WHERE MONTH(create_date) = ${getMonthNumber(serverName)}`;
      }
    }
    
    // Use the determined table name
    if (appropriateTableName !== 'Unknown') {
      tableName = appropriateTableName;
    }
    
    // Create the record object
    const record = {
      id,
      DataPoint: formattedDataPoint,
      chartGroup,
      variableName: formattedVariableName,
      serverName: updatedServerName,
      value,
      tableName,
      calculation,
      productionSqlExpression: generatedSqlExpression,
      lastUpdated
    };
    
    records.push(record);
  }
  
  console.log(`Processed ${records.length} records`);
  
  // Generate the new file content
  const dataString = JSON.stringify(records, null, 2)
    .replace(/\[/g, '[\n  ')
    .replace(/\]/g, '\n]')
    .replace(/},/g, '},\n  ')
    .replace(/}$/m, '}\n');
  
  const newFileContent = `${header}: SpreadsheetRow[] = ${dataString};\n\n${footer}`;
  
  // Write the updated content to the file
  fs.writeFileSync(outputFilePath, newFileContent);
  console.log('Successfully updated complete-chart-data.ts file with CSV data');
  
} catch (error) {
  console.error('Error:', error.message);
}

// Helper function to get month number from month name
function getMonthNumber(monthName) {
  const months = {
    'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
    'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12
  };
  return months[monthName] || 1; // Default to January if not found
}

// Helper function to get day offset from DataPoint name
function getDayOffset(dataPointName) {
  if (dataPointName.includes('Today')) {
    const parts = dataPointName.split('Today-');
    if (parts.length > 1) {
      return parseInt(parts[1]) || 0;
    }
    return 0;
  }
  return 0;
}
