# Ultra simple script to fix the syntax error and replace sql references\n\n# Part 1: Fix the syntax error in single-source-data.ts\n$singleDataFile = \"c:\\Users\\BobM\\CascadeProjects\\TallmanDashboard_new\\lib\\db\\single-source-data.ts\"\nWrite-Host \"Fixing syntax error in $singleDataFile\" -ForegroundColor Cyan\n\n# Create backup\n$backupFile = \"$singleDataFile.bak-simple\"\nCopy-Item -Path $singleDataFile -Destination $backupFile -Force\n\n# Read the file line by line\n$lines = Get-Content -Path $singleDataFile\n$fixedLines = @()\n$foundError = $false\n\n# Process each line\nfor ($i = 0; $i -lt $lines.Count; $i++) {\n    $line = $lines[$i]\n    \n    # Check for the specific error pattern\n    if ($line.Trim() -eq '};' -and ($i+2 -lt $lines.Count) -and $lines[$i+2].Trim().StartsWith('const group9Data')) {\n        Write-Host \"  Found syntax error at line $($i+1): '$line'\" -ForegroundColor Yellow\n        $fixedLines += '];'  # Replace }; with ];\n        $foundError = $true\n    } else {\n        $fixedLines += $line\n    }\n}\n\n# Write the fixed content back\nif ($foundError) {\n    Set-Content -Path $singleDataFile -Value $fixedLines -Force\n    Write-Host \"  Fixed syntax error in single-source-data.ts\" -ForegroundColor Green\n} else {\n    Write-Host \"  Could not find the specific syntax error pattern\" -ForegroundColor Red\n}\n\n# Part 2: Direct replacement of sql across the project\nWrite-Host \"\"\nWrite-Host \"Replacing all sql references across the project\" -ForegroundColor Cyan\n\n# File extensions to target\n$fileExtensions = @(\".ts\", \".tsx\", \".js\", \".jsx\", \".json\", \".md\", \".txt\")\n\n# Find files (excluding node_modules, .git, and .next)\n$files = Get-ChildItem -Path \"c:\\Users\\BobM\\CascadeProjects\\TallmanDashboard_new\" -Recurse -File | Where-Object {\n    $_.Extension -in $fileExtensions -and\n    $_.FullName -notlike \"*\\node_modules\\*\" -and\n    $_.FullName -notlike \"*\\.git\\*\" -and\n    $_.FullName -notlike \"*\\.next\\*\" -and\n    $_.Length -lt 10MB # Skip very large files\n}\n\n$totalFiles = $files.Count\nWrite-Host \"Found $totalFiles files to process\" -ForegroundColor Yellow\n\n$replacedFiles = 0\n$totalReplacements = 0\n\n# Process each file\nforeach ($file in $files) {\n    $content = Get-Content -Path $file.FullName -Raw -ErrorAction SilentlyContinue\n    if ($null -eq $content) { continue }\n    \n    $originalContent = $content\n    $replacements = 0\n    \n    # Simple direct replacements\n    $newContent = $content -replace \"sql_expression\", \"sql_expression\"\n    if ($newContent -ne $content) {\n        $count = ([regex]::Matches($content, \"sql_expression\")).Count\n        $replacements += $count\n        $content = $newContent\n    }\n    \n    $newContent = $content -replace \"sql\", \"sql_expression\"\n    if ($newContent -ne $content) {\n        $count = ([regex]::Matches($content, \"sql\")).Count\n        $replacements += $count\n        $content = $newContent\n    }\n    \n    $newContent = $content -replace \"productionSqlExpression\", \"sqlExpression\"\n    if ($newContent -ne $content) {\n        $count = ([regex]::Matches($content, \"productionSqlExpression\")).Count\n        $replacements += $count\n        $content = $newContent\n    }\n    \n    $newContent = $content -replace \"productionSql\", \"sqlExpression\"\n    if ($newContent -ne $content) {\n        $count = ([regex]::Matches($content, \"productionSql\")).Count\n        $replacements += $count\n        $content = $newContent\n    }\n    \n    # If we made changes, write them back\n    if ($content -ne $originalContent) {\n        Set-Content -Path $file.FullName -Value $content -NoNewline\n        $replacedFiles++\n        $totalReplacements += $replacements\n        \n        # Only report files with significant replacements\n        if ($replacements > 0) {\n            Write-Host \"  Updated $($file.FullName) with $replacements replacements\" -ForegroundColor Green\n        }\n    }\n}\n\nWrite-Host \"\\nReplacements complete:\" -ForegroundColor Cyan\nWrite-Host \"  Total files processed: $totalFiles\" -ForegroundColor White\nWrite-Host \"  Files with replacements: $replacedFiles\" -ForegroundColor Green\nWrite-Host \"  Total replacements made: $totalReplacements\" -ForegroundColor Green\nWrite-Host \"\\nPlease restart your development server to check if the issues are fixed.\" -ForegroundColor Yellow\n
