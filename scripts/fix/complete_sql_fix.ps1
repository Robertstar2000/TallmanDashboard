# PowerShell script to comprehensively fix all SQL expression references across the project\n# This script specifically focuses on database schema and SQL column references\n\n$rootDir = \"c:\\Users\\BobM\\CascadeProjects\\TallmanDashboard_new\"\n\nWrite-Host \"Starting comprehensive SQL reference fix...\" -ForegroundColor Cyan\n\n# === Part 1: Fix database schema files ===\n\n# First, let's specifically target the sqlite.ts file which manages the schema\n$sqliteFile = \"$rootDir\\lib\\db\\sqlite.ts\"\nif (Test-Path $sqliteFile) {\n    Write-Host \"Processing main database schema file: $sqliteFile\" -ForegroundColor Yellow\n    \n    $content = Get-Content -Path $sqliteFile -Raw\n    $originalContent = $content\n    \n    # Fix in CREATE TABLE statements\n    $content = $content -replace 'sql_expression\\s+TEXT', 'sql_expression TEXT'\n    $content = $content -replace 'sql\\s+TEXT', 'sql_expression TEXT'\n    \n    # Fix SQL column in INSERT statements\n    $content = $content -replace '\\(name,\\s*chart_group,\\s*value,\\s*sql_expression', '(name, chart_group, value, sql_expression'\n    $content = $content -replace '\\(name,\\s*chart_group,\\s*value,\\s*sql', '(name, chart_group, value, sql_expression'\n    \n    # Fix SQL column in parameter placeholders\n    $content = $content -replace '\\?,\\s*\\?,\\s*\\?,\\s*\\?\\s*\\),\\s*\\[row\\.name,\\s*row\\.chartGroup,\\s*row\\.value,\\s*row\\.sql_expression', '?, ?, ?, ?), [row.name, row.chartGroup, row.value, row.sql_expression'\n    $content = $content -replace '\\?,\\s*\\?,\\s*\\?,\\s*\\?\\s*\\),\\s*\\[row\\.name,\\s*row\\.chartGroup,\\s*row\\.value,\\s*row\\.sql\\]', '?, ?, ?, ?), [row.name, row.chartGroup, row.value, row.sql_expression]'\n    \n    # Fix SQL column in SELECT statements\n    $content = $content -replace 'SELECT\\s+[^\\)]*sql_expression', 'SELECT id, name, chart_group, value, sql_expression'\n    $content = $content -replace 'SELECT\\s+[^\\)]*sql', 'SELECT id, name, chart_group, value, sql_expression'\n    \n    # Write changes if any were made\n    if ($content -ne $originalContent) {\n        Set-Content -Path $sqliteFile -Value $content -NoNewline\n        Write-Host \"Updated database schema in sqlite.ts\" -ForegroundColor Green\n    } else {\n        Write-Host \"No schema changes needed in sqlite.ts\" -ForegroundColor Yellow\n    }\n} else {\n    Write-Host \"sqlite.ts not found at expected location\" -ForegroundColor Red\n}\n\n# === Part 2: Fix syntax in single-source-data.ts ===\n\n$dataFile = \"$rootDir\\lib\\db\\single-source-data.ts\"\nif (Test-Path $dataFile) {\n    Write-Host \"\\nProcessing single-source-data.ts for syntax errors...\" -ForegroundColor Yellow\n    \n    $content = Get-Content -Path $dataFile -Raw\n    $originalContent = $content\n    \n    # Fix array closure issue\n    $content = $content -replace '\\}\\;(\\s*)const group9Data', '];$1const group9Data'\n    \n    # Fix any remaining productionSqlExpression references\n    $content = $content -replace '\"productionSqlExpression\"\\s*:', '\"sqlExpression\":'\n    $content = $content -replace '\"sql_expression\"\\s*:', '\"sql_expression\":'\n    $content = $content -replace '\"sql\"\\s*:', '\"sql_expression\":'\n    \n    # Write changes if any were made\n    if ($content -ne $originalContent) {\n        Set-Content -Path $dataFile -Value $content -NoNewline\n        Write-Host \"Updated single-source-data.ts\" -ForegroundColor Green\n    } else {\n        Write-Host \"No changes needed in single-source-data.ts\" -ForegroundColor Yellow\n    }\n} else {\n    Write-Host \"single-source-data.ts not found at expected location\" -ForegroundColor Red\n}\n\n# === Part 3: Recursively scan all other files in the project ===\n\nWrite-Host \"\\nScanning all project files for additional SQL expression references...\" -ForegroundColor Yellow\n\n# Define file extensions to search\n$fileTypes = @(\".ts\", \".tsx\", \".js\", \".jsx\", \".json\", \".md\")\n\n# Get all matching files, excluding node_modules, .git, and other system directories\n$files = Get-ChildItem -Path $rootDir -Recurse -File | Where-Object {\n    $_.Extension -in $fileTypes -and\n    $_.FullName -notlike \"*\\node_modules\\*\" -and\n    $_.FullName -notlike \"*\\.git\\*\" -and\n    $_.FullName -notlike \"*\\.next\\*\" -and\n    # Skip files we've already processed\n    $_.FullName -ne $sqliteFile -and\n    $_.FullName -ne $dataFile\n}\n\n$filesProcessed = 0\n$filesModified = 0\n$replaceCount = 0\n\nforeach ($file in $files) {\n    $filesProcessed++\n    \n    # Skip very large files\n    if ($file.Length -gt 5MB) { continue }\n    \n    try {\n        $content = Get-Content -Path $file.FullName -Raw -ErrorAction SilentlyContinue\n        if ($null -eq $content) { continue }\n        \n        $originalContent = $content\n        \n        # Apply all replacements\n        $content = $content -replace 'sql_expression', 'sql_expression'\n        $content = $content -replace 'productionSqlExpression', 'sqlExpression'\n        $content = $content -replace 'sql(?!_expression)', 'sql_expression'\n        $content = $content -replace 'ProductionSqlExpression', 'SqlExpression'\n        \n        # Save if changed\n        if ($content -ne $originalContent) {\n            Set-Content -Path $file.FullName -Value $content -NoNewline\n            $filesModified++\n            $matchCount = ([regex]::Matches($originalContent, 'sql|productionSql')).Count\n            $replaceCount += $matchCount\n            Write-Host \"Updated $($file.Name) with $matchCount replacements\" -ForegroundColor Green\n        }\n    } catch {\n        Write-Host \"Error processing $($file.Name): $_\" -ForegroundColor Red\n    }\n    \n    # Show progress every 10 files\n    if ($filesProcessed % 10 -eq 0) {\n        Write-Host \"Processed $filesProcessed files so far...\" -ForegroundColor DarkGray\n    }\n}\n\n# === Part 4: Generate a database schema check script ===\n\nWrite-Host \"\\nCreating a script to verify database schema...\" -ForegroundColor Yellow\n\n$schemaCheckScript = @\"\nconst sqlite3 = require('sqlite3').verbose();\nconst db = new sqlite3.Database('./data/dashboard.db');\n\nconsole.log('Connected to the database at', process.cwd() + '/data/dashboard.db');\nconsole.log('');\n\n// Check table structure\ndb.all(`PRAGMA table_info(chart_data)`, (err, columns) => {\n  if (err) {\n    console.error('Error getting table info:', err);\n    return;\n  }\n  \n  console.log('Columns in chart_data table:');\n  columns.forEach((col, i) => {\n    console.log(`\${i}: \${col.name} (\${col.type})`);\n  });\n  \n  console.log('');\n  console.log('Has sql_expression column:', columns.some(col => col.name === 'sql_expression'));\n  console.log('Has sql_expression column:', columns.some(col => col.name === 'sql_expression'));\n  console.log('Has sql column:', columns.some(col => col.name === 'sql'));\n  console.log('');\n});\n\n// Close the database connection\nsetTimeout(() => {\n  db.close();\n  console.log('Database connection closed.');\n}, 1000);\n\"@\n\nSet-Content -Path \"$rootDir\\verify_db_schema.js\" -Value $schemaCheckScript\nWrite-Host \"Created verify_db_schema.js to check the database schema\" -ForegroundColor Green\n\n# === Summary ===\n\nWrite-Host \"\\nSQL Expression Replacement Summary:\" -ForegroundColor Cyan\nWrite-Host \"================================\" -ForegroundColor Cyan\nWrite-Host \"Files processed: $filesProcessed\" -ForegroundColor White\nWrite-Host \"Files modified: $filesModified\" -ForegroundColor Green\nWrite-Host \"Total replacements: $replaceCount\" -ForegroundColor Green\nWrite-Host \"\\nAdditionally processed database schema files directly\" -ForegroundColor White\nWrite-Host \"\\nPlease restart your server and run the following to verify database schema:\" -ForegroundColor Yellow\nWrite-Host \"node verify_db_schema.js\" -ForegroundColor White\n
