/**
 * Script to query POR database schema and generate TypeScript schema file
 */

import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';

// Configuration
const CONFIG = {
  SERVER_URL: 'http://localhost:3004',
  OUTPUT_FILE: path.join(process.cwd(), 'lib', 'db', 'por-schema.ts'),
  POR_FILE_PATH: 'C:\\Users\\BobM\\Desktop\\POR.MDB'
};

interface TableColumn {
  name: string;
  dataType: string;
  size?: number;
  isNullable?: boolean;
}

interface TableSchema {
  name: string;
  columns: TableColumn[];
}

interface DatabaseSchema {
  tables: TableSchema[];
  databaseName: string;
  lastUpdated: string;
}

/**
 * Main function to get POR schema
 */
async function main() {
  try {
    console.log('POR Schema Generator');
    console.log('===================\n');
    
    // Get available tables from the POR database
    console.log('Fetching available tables from POR database...');
    const tables = await getAvailableTables();
    
    if (!tables || tables.length === 0) {
      console.error('No tables found in POR database.');
      return;
    }
    
    console.log(`Found ${tables.length} tables in POR database.`);
    
    // Get columns for each table
    console.log('\nFetching columns for each table...');
    const schema: DatabaseSchema = {
      tables: [],
      databaseName: 'POR',
      lastUpdated: new Date().toISOString()
    };
    
    for (const tableName of tables) {
      console.log(`Processing table: ${tableName}`);
      
      try {
        const columns = await getTableColumns(tableName);
        
        if (columns && columns.length > 0) {
          schema.tables.push({
            name: tableName,
            columns: columns.map(col => ({
              name: col,
              dataType: 'UNKNOWN' // We don't have type information from the API
            }))
          });
          
          console.log(`  ✅ Found ${columns.length} columns`);
        } else {
          console.log(`  ❌ No columns found`);
        }
      } catch (error) {
        console.error(`  ❌ Error fetching columns for ${tableName}:`, error);
      }
    }
    
    // Generate TypeScript schema file
    console.log('\nGenerating TypeScript schema file...');
    generateSchemaFile(schema);
    
    console.log(`\nSchema file generated at: ${CONFIG.OUTPUT_FILE}`);
  } catch (error) {
    console.error('Error in main function:', error);
  }
}

/**
 * Get available tables from the POR database
 */
async function getAvailableTables(): Promise<string[]> {
  try {
    const response = await fetch(`${CONFIG.SERVER_URL}/api/test-por-sql`);
    
    if (!response.ok) {
      throw new Error(`API error: ${response.statusText}`);
    }
    
    const data = await response.json();
    return data.availableTables || [];
  } catch (error) {
    console.error('Error fetching available tables:', error);
    return [];
  }
}

/**
 * Get columns for a specific table
 */
async function getTableColumns(tableName: string): Promise<string[]> {
  try {
    const response = await fetch(`${CONFIG.SERVER_URL}/api/get-table-columns`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        tableName, 
        serverType: 'POR' 
      })
    });
    
    if (!response.ok) {
      throw new Error(`API error: ${response.statusText}`);
    }
    
    const data = await response.json();
    return data.columns || [];
  } catch (error) {
    console.error(`Error fetching columns for ${tableName}:`, error);
    return [];
  }
}

/**
 * Generate TypeScript schema file
 */
function generateSchemaFile(schema: DatabaseSchema) {
  const content = `/**
 * POR Database Schema
 * 
 * This file was auto-generated by the get-por-schema.ts script
 * Last updated: ${new Date().toISOString()}
 */

export interface PORTableColumn {
  name: string;
  dataType: string;
  size?: number;
  isNullable?: boolean;
}

export interface PORTableSchema {
  name: string;
  columns: PORTableColumn[];
}

export interface PORDatabaseSchema {
  tables: PORTableSchema[];
  databaseName: string;
  lastUpdated: string;
}

/**
 * Complete schema for the POR database
 */
export const porSchema: PORDatabaseSchema = ${JSON.stringify(schema, null, 2)};

/**
 * Get all table names from the POR database
 */
export function getPORTableNames(): string[] {
  return porSchema.tables.map(table => table.name);
}

/**
 * Get all columns for a specific table
 */
export function getPORTableColumns(tableName: string): PORTableColumn[] {
  const table = porSchema.tables.find(t => t.name.toLowerCase() === tableName.toLowerCase());
  return table ? table.columns : [];
}

/**
 * Get column names for a specific table
 */
export function getPORTableColumnNames(tableName: string): string[] {
  return getPORTableColumns(tableName).map(col => col.name);
}

/**
 * Check if a table exists in the POR database
 */
export function isPORTableExists(tableName: string): boolean {
  return porSchema.tables.some(t => t.name.toLowerCase() === tableName.toLowerCase());
}

/**
 * Check if a column exists in a specific table
 */
export function isPORColumnExists(tableName: string, columnName: string): boolean {
  const columns = getPORTableColumns(tableName);
  return columns.some(col => col.name.toLowerCase() === columnName.toLowerCase());
}
`;

  fs.writeFileSync(CONFIG.OUTPUT_FILE, content);
}

// Run the main function
main().catch(console.error);
