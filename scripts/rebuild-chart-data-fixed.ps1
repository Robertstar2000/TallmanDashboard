# PowerShell script to rebuild the complete-chart-data.ts file from MasterSQLTable.csv
# This script will create a properly formatted JSON file with correct SQL syntax for both P21 and POR entries

$csvPath = "C:\Users\BobM\CascadeProjects\TallmanDashboard_new\scripts\MasterSQLTable.csv"
$outputPath = "C:\Users\BobM\CascadeProjects\TallmanDashboard_new\lib\db\complete-chart-data.ts"
$backupPath = "C:\Users\BobM\CascadeProjects\TallmanDashboard_new\lib\db\complete-chart-data.ts.backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"

# Create a backup of the original file if it exists
if (Test-Path $outputPath) {
    Copy-Item -Path $outputPath -Destination $backupPath -Force
    Write-Host "Created backup at $backupPath"
}

# Define the file header
$fileHeader = @"
import type { SpreadsheetRow } from './types';

// This file was auto-generated by the rebuild-chart-data-fixed.ps1 script
// Last updated: $(Get-Date -Format "yyyy-MM-ddTHH:mm:ss.fffZ")

export const initialSpreadsheetData: SpreadsheetRow[] = [
"@

# Define the file footer
$fileFooter = @"
];

// Export the combined data
export const combinedData = initialSpreadsheetData;
"@

# Function to format SQL expression based on server type
function Format-SqlExpression {
    param (
        [string]$serverName,
        [string]$dataPoint,
        [string]$id
    )
    
    # Default SQL expressions
    $formattedSql = "SELECT COUNT(*) as value FROM default_table"
    
    if ($serverName -eq "P21") {
        # P21 (SQL Server) syntax
        if ($dataPoint -like "AR Aging Amount Due 1-30 Days") {
            $formattedSql = "SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) BETWEEN 1 AND 30"
        }
        elseif ($dataPoint -like "AR Aging Amount Due 31-60 Days") {
            $formattedSql = "SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) BETWEEN 31 AND 60"
        }
        elseif ($dataPoint -like "AR Aging Amount Due 61-90 Days") {
            $formattedSql = "SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) BETWEEN 61 AND 90"
        }
        elseif ($dataPoint -like "AR Aging Amount Due 90+ Days") {
            $formattedSql = "SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) > 90"
        }
        elseif ($dataPoint -like "AR Aging Amount Due Current") {
            $formattedSql = "SELECT SUM(balance) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) <= 0"
        }
        elseif ($dataPoint -like "Accounts Payable*") {
            $month = $dataPoint -replace "Accounts Payable (\w+)", '$1'
            $formattedSql = "SELECT SUM(amount) as value FROM dbo.ap_open_items WITH (NOLOCK) WHERE DATENAME(month, invoice_date) = '$month'"
        }
        elseif ($dataPoint -like "Accounts Receivable*") {
            $month = $dataPoint -replace "Accounts Receivable (\w+)", '$1'
            $formattedSql = "SELECT SUM(amount) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATENAME(month, invoice_date) = '$month'"
        }
        elseif ($dataPoint -like "Accounts Overdue*") {
            $month = $dataPoint -replace "Accounts Overdue (\w+)", '$1'
            $formattedSql = "SELECT COUNT(*) as value FROM dbo.ar_open_items WITH (NOLOCK) WHERE DATEDIFF(day, due_date, GETDATE()) > 0 AND DATENAME(month, invoice_date) = '$month'"
        }
        elseif ($dataPoint -like "Customer Metrics*") {
            $formattedSql = "SELECT COUNT(*) as value FROM dbo.customer WITH (NOLOCK) WHERE customer_status = 'Active'"
        }
        elseif ($dataPoint -like "Historical Data*") {
            $formattedSql = "SELECT SUM(amount) as value FROM dbo.historical_data WITH (NOLOCK)"
        }
        elseif ($dataPoint -like "Inventory*") {
            $formattedSql = "SELECT SUM(qty_on_hand) as value FROM dbo.inv_mast WITH (NOLOCK)"
        }
        elseif ($dataPoint -like "Key Metrics*") {
            $formattedSql = "SELECT COUNT(*) as value FROM dbo.oe_hdr WITH (NOLOCK) WHERE order_status = 'Open'"
        }
        elseif ($dataPoint -like "Site Distribution*") {
            $location = $dataPoint -replace "Site Distribution Value (\w+)", '$1'
            $formattedSql = "SELECT SUM(amount) as value FROM dbo.site_data WITH (NOLOCK) WHERE location = '$location'"
        }
        else {
            # Generic P21 SQL for any other data points
            $formattedSql = "SELECT COUNT(*) as value FROM dbo.default_table WITH (NOLOCK)"
        }
    }
    elseif ($serverName -eq "POR") {
        # POR (MS Access/Jet SQL) syntax
        if ($dataPoint -like "POR Overview New Rentals*") {
            $month = $dataPoint -replace "POR Overview New Rentals (\w+)", '$1'
            $monthNum = switch ($month) {
                "Jan" { 1 }
                "Feb" { 2 }
                "Mar" { 3 }
                "Apr" { 4 }
                "May" { 5 }
                "Jun" { 6 }
                "Jul" { 7 }
                "Aug" { 8 }
                "Sep" { 9 }
                "Oct" { 10 }
                "Nov" { 11 }
                "Dec" { 12 }
                default { 1 }
            }
            $formattedSql = "SELECT Count(*) as value FROM Rentals WHERE Status = 'New' AND Month(CreatedDate) = $monthNum AND Year(CreatedDate) = Year(Date())"
        }
        elseif ($dataPoint -like "POR Overview Open Rentals") {
            $formattedSql = "SELECT Count(*) as value FROM Rentals WHERE Status IN ('Open', 'Active', 'Out')"
        }
        elseif ($dataPoint -like "POR Overview Open Rentals*") {
            $month = $dataPoint -replace "POR Overview Open Rentals (\w+)", '$1'
            $monthNum = switch ($month) {
                "Jan" { 1 }
                "Feb" { 2 }
                "Mar" { 3 }
                "Apr" { 4 }
                "May" { 5 }
                "Jun" { 6 }
                "Jul" { 7 }
                "Aug" { 8 }
                "Sep" { 9 }
                "Oct" { 10 }
                "Nov" { 11 }
                "Dec" { 12 }
                default { 1 }
            }
            $formattedSql = "SELECT Count(*) as value FROM Rentals WHERE Status IN ('Open', 'Active', 'Out') AND Month(CreatedDate) = $monthNum"
        }
        elseif ($dataPoint -like "POR Overview Rental Value*") {
            $month = $dataPoint -replace "POR Overview Rental Value (\w+)", '$1'
            $monthNum = switch ($month) {
                "Jan" { 1 }
                "Feb" { 2 }
                "Mar" { 3 }
                "Apr" { 4 }
                "May" { 5 }
                "Jun" { 6 }
                "Jul" { 7 }
                "Aug" { 8 }
                "Sep" { 9 }
                "Oct" { 10 }
                "Nov" { 11 }
                "Dec" { 12 }
                default { 1 }
            }
            $formattedSql = "SELECT Sum(Nz(RentalAmount, 0)) as value FROM Rentals WHERE Status IN ('Open', 'Active', 'Out') AND Month(CreatedDate) = $monthNum"
        }
        elseif ($dataPoint -like "Web Orders Orders*") {
            $month = $dataPoint -replace "Web Orders Orders (\w+)", '$1'
            $monthNum = switch ($month) {
                "Jan" { 1 }
                "Feb" { 2 }
                "Mar" { 3 }
                "Apr" { 4 }
                "May" { 5 }
                "Jun" { 6 }
                "Jul" { 7 }
                "Aug" { 8 }
                "Sep" { 9 }
                "Oct" { 10 }
                "Nov" { 11 }
                "Dec" { 12 }
                default { 1 }
            }
            $formattedSql = "SELECT Count(*) as value FROM Orders WHERE Source = 'Web' AND Month(OrderDate) = $monthNum AND Year(OrderDate) = Year(Date())"
        }
        else {
            # Generic POR SQL for any other data points
            $formattedSql = "SELECT Count(*) as value FROM Rentals"
        }
    }
    
    return $formattedSql
}

# Function to determine table name based on data point and server
function Get-TableName {
    param (
        [string]$serverName,
        [string]$dataPoint
    )
    
    if ($serverName -eq "P21") {
        if ($dataPoint -like "AR Aging*") {
            return "dbo.ar_open_items"
        }
        elseif ($dataPoint -like "Accounts Payable*") {
            return "dbo.ap_open_items"
        }
        elseif ($dataPoint -like "Accounts Receivable*") {
            return "dbo.ar_open_items"
        }
        elseif ($dataPoint -like "Accounts Overdue*") {
            return "dbo.ar_open_items"
        }
        elseif ($dataPoint -like "Customer Metrics*") {
            return "dbo.customer"
        }
        elseif ($dataPoint -like "Historical Data*") {
            return "dbo.historical_data"
        }
        elseif ($dataPoint -like "Inventory*") {
            return "dbo.inv_mast"
        }
        elseif ($dataPoint -like "Key Metrics*") {
            return "dbo.oe_hdr"
        }
        elseif ($dataPoint -like "Site Distribution*") {
            return "dbo.site_data"
        }
        else {
            return "dbo.default_table"
        }
    }
    elseif ($serverName -eq "POR") {
        if ($dataPoint -like "POR Overview*") {
            return "Rentals"
        }
        elseif ($dataPoint -like "Web Orders*") {
            return "Orders"
        }
        else {
            return "Rentals"
        }
    }
    
    return "default_table"
}

try {
    # Check if the CSV file exists
    if (Test-Path $csvPath) {
        Write-Host "Reading data from CSV file..."
        
        # Read the CSV file (tab and comma delimited)
        $csvContent = Get-Content -Path $csvPath -Raw
        $lines = $csvContent -split "`r`n" | Where-Object { $_ -ne "" }
        
        # Skip the header line
        $dataLines = $lines | Select-Object -Skip 1
        
        # Create the new file with header
        $newContent = $fileHeader + "`r`n"
        
        # Process each line in the CSV
        foreach ($line in $dataLines) {
            # Split the line by tabs and commas, and trim whitespace
            $columns = $line -split '\t,\t' | ForEach-Object { $_.Trim() }
            
            # Extract values
            $id = $columns[0].Trim()
            $dataPoint = $columns[1].Trim()
            $chartGroup = $columns[2].Trim()
            $variableName = $columns[3].Trim()
            $serverName = $columns[4].Trim()
            $value = $columns[5].Trim()
            $tableName = Get-TableName -serverName $serverName -dataPoint $dataPoint
            $sqlExpression = Format-SqlExpression -serverName $serverName -dataPoint $dataPoint -id $id
            
            # Format the timestamp
            $timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
            
            # Create JSON entry
            $jsonEntry = @"
  {
    "id": "$id",
    "DataPoint": "$dataPoint",
    "chartGroup": "$chartGroup",
    "variableName": "$variableName",
    "serverName": "$serverName",
    "value": "$value",
    "tableName": "$tableName",
    "calculation": "number",
    "productionSqlExpression": "$sqlExpression",
    "lastUpdated": "$timestamp"
  },
  
"@
            
            # Add the entry to the new content
            $newContent += $jsonEntry
        }
        
        # Remove the trailing comma from the last entry
        $newContent = $newContent.TrimEnd(",`r`n`t ") + "`r`n"
        
        # Add the footer
        $newContent += $fileFooter
        
        # Write the new content to the output file
        Set-Content -Path $outputPath -Value $newContent
        
        Write-Host "Successfully rebuilt complete-chart-data.ts with entries from MasterSQLTable.csv"
    } else {
        Write-Host "CSV file not found at $csvPath"
    }
} catch {
    Write-Host "Error: $_"
}

Write-Host "Complete-chart-data.ts has been rebuilt with proper entries!"
