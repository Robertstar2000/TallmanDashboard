// Script to completely regenerate initial-data.ts from the current database state
const Database = require('better-sqlite3');
const fs = require('fs');
const path = require('path');

// Connect to the database
const db = new Database('./data/dashboard.db');

try {
  console.log('Connected to the database at', path.resolve('./data/dashboard.db'));
  console.log('\n=== REGENERATING INITIAL DATA FROM DATABASE ===\n');
  
  // Get all chart data from the database
  const chartData = db.prepare('SELECT * FROM chart_data ORDER BY chart_group, id').all();
  console.log(`Found ${chartData.length} rows in the database`);
  
  // Path to the initial-data.ts file
  const initialDataPath = path.resolve('./lib/db/initial-data.ts');
  
  // Create a backup of the file
  const backupPath = `${initialDataPath}.backup-${Date.now()}.ts`;
  fs.copyFileSync(initialDataPath, backupPath);
  console.log(`Created backup of initial-data.ts at ${backupPath}`);
  
  // Generate the new file content
  let newContent = `
import { getMode } from '@/lib/state/dashboardState';

export type SpreadsheetRow = {
  id: string;
  name: string;
  chartGroup: string;
  variableName: string;
  serverName: string;
  value: string;
  calculation: string;
  sqlExpression: string;
  productionSqlExpression: string;
  tableName: string;
  timeframe?: string;
  lastUpdated?: string;
  category?: string;
};

export interface ChartGroupSetting {
  id: string;
  name: string;
  display_order: number;
  is_visible: number;
  settings: Record<string, any>;
}

export interface ServerConfig {
  id: number;
  server_name: string;
  host: string;
  port: number;
  database: string;
  username: string;
  password: string;
  created_at?: string;
  updated_at?: string;
  config?: string;
  server?: string;
}

// This file was auto-generated by the regenerate-initial-data.js script
// Last updated: ${new Date().toISOString()}

// Chart data from the admin spreadsheet
export const initialSpreadsheetData: SpreadsheetRow[] = [
`;
  
  // Add each row from the database
  for (const row of chartData) {
    newContent += `  {
    id: '${row.id}',
    name: '',
    chartGroup: '${row.chart_group}',
    variableName: '${row.variable_name}',
    serverName: '${row.server_name || 'P21'}',
    value: '${row.value || '0'}',
    calculation: 'COUNT(*)',
    sqlExpression: \`${row.sql_expression || 'SELECT 0'}\`,
    productionSqlExpression: \`${row.production_sql_expression || 'SELECT 0'}\`,
    tableName: '${row.db_table_name || ''}'
  },
`;
  }
  
  // Close the array and add the chart group settings
  newContent += `];

// Chart group settings
export const chartGroupSettings: ChartGroupSetting[] = [];

// Server configurations
export const serverConfigs: ServerConfig[] = [
  {
    id: 1,
    server_name: 'P21',
    host: 'localhost',
    port: 1433,
    database: 'P21',
    username: 'sa',
    password: 'password',
    server: 'P21'
  },
  {
    id: 2,
    server_name: 'POR',
    host: 'localhost',
    port: 1433,
    database: 'POR',
    username: 'sa',
    password: 'password',
    server: 'POR'
  }
];
`;
  
  // Write the new file
  fs.writeFileSync(initialDataPath, newContent);
  console.log(`Successfully regenerated ${initialDataPath} from database`);
  
  console.log('\nInitial data regeneration completed!');
} catch (err) {
  console.error('Error:', err.message);
} finally {
  // Close the database connection
  db.close();
  console.log('Database connection closed');
}
