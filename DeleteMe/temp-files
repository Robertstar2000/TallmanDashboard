
      import { executeWrite } from './lib/db/sqlite';
      
      async function setupPorHistoricalData() {
        try {
          // Check if the admin_variables table exists
          const tableCheckSql = "SELECT name FROM sqlite_master WHERE type='table' AND name='admin_variables'";
          const tableResult = await executeWrite(tableCheckSql);
          
          if (!Array.isArray(tableResult) || tableResult.length === 0) {
            console.log('admin_variables table does not exist, creating it...');
            
            // Create the admin_variables table
            const createTableSql = `
              CREATE TABLE admin_variables (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                value TEXT,
                category TEXT,
                chart_group TEXT,
                chart_name TEXT,
                variable_name TEXT,
                server_name TEXT,
                sql_expression TEXT,
                production_sql_expression TEXT,
                table_name TEXT,
                timeframe TEXT
              )
            `;
            
            await executeWrite(createTableSql);
            console.log('Created admin_variables table');
          }
          
          // Check if there are any POR Historical Data rows
          const checkSql = "SELECT COUNT(*) as count FROM admin_variables WHERE chart_name = 'Historical Data' AND variable_name = 'POR'";
          const checkResult = await executeWrite(checkSql);
          const count = Array.isArray(checkResult) && checkResult.length > 0 ? checkResult[0].count : 0;
          
          console.log(`Found ${count} existing POR Historical Data rows`);
          
          // Delete existing POR Historical Data rows if they exist
          if (count > 0) {
            console.log('Deleting existing POR Historical Data rows...');
            const deleteSql = "DELETE FROM admin_variables WHERE chart_name = 'Historical Data' AND variable_name = 'POR'";
            await executeWrite(deleteSql);
            console.log(`Deleted ${count} POR Historical Data rows`);
          }
          
          // Create the POR Historical Data rows
          console.log('Creating POR Historical Data rows...');
          const porHistoricalRows = [];
          
          for (let i = 1; i <= 12; i++) {
            const monthOffset = i === 1 ? 0 : -(i - 1);
            
            // MS Access SQL for the month - using the verified TotalAmount column
            const msAccessSql = `SELECT Sum(Nz([TotalAmount],0)) AS value FROM [PurchaseOrder] WHERE Format([Date],'yyyy-mm') = Format(DateAdd('m',${monthOffset},Date()),'yyyy-mm')`;
            
            // SQL Server equivalent (for reference)
            const sqlServerSql = `SELECT ISNULL(SUM([TotalAmount]), 0) as value FROM [PurchaseOrder] WHERE FORMAT([Date], 'yyyy-MM') = FORMAT(DATEADD(month, ${monthOffset}, GETDATE()), 'yyyy-MM')`;
            
            porHistoricalRows.push({
              name: `Historical Data - POR - Month ${i}`,
              value: '0',
              category: 'POR',
              chart_group: 'Historical Data',
              chart_name: 'Historical Data',
              variable_name: 'POR',
              server_name: 'POR',
              sql_expression: sqlServerSql,
              production_sql_expression: msAccessSql,
              table_name: 'PurchaseOrder',
              timeframe: `Month ${i}`
            });
          }
          
          // Insert the rows
          for (const row of porHistoricalRows) {
            const insertSql = `
              INSERT INTO admin_variables (
                name, 
                value, 
                category, 
                chart_group, 
                chart_name, 
                variable_name, 
                server_name, 
                sql_expression, 
                production_sql_expression,
                table_name,
                timeframe
              ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `;
            
            await executeWrite(insertSql, [
              row.name,
              row.value,
              row.category,
              row.chart_group,
              row.chart_name,
              row.variable_name,
              row.server_name,
              row.sql_expression,
              row.production_sql_expression,
              row.table_name,
              row.timeframe
            ]);
            
            console.log(`Created POR Historical Data row for ${row.timeframe}`);
          }
          
          console.log(`Created ${porHistoricalRows.length} POR Historical Data rows`);
          
          // Verify the rows
          const verifySql = "SELECT * FROM admin_variables WHERE chart_name = 'Historical Data' AND variable_name = 'POR' ORDER BY timeframe";
          const verifyResult = await executeWrite(verifySql);
          const verifyCount = Array.isArray(verifyResult) ? verifyResult.length : 0;
          
          console.log(`\nVerified ${verifyCount} POR Historical Data rows in the admin_variables table`);
          
          if (verifyCount > 0 && Array.isArray(verifyResult)) {
            console.log('\nSample POR Historical Data row:');
            console.log(`ID: ${verifyResult[0].id}`);
            console.log(`Name: ${verifyResult[0].name}`);
            console.log(`Timeframe: ${verifyResult[0].timeframe}`);
            console.log(`Production SQL: ${verifyResult[0].production_sql_expression}`);
            
            // Return the verified rows
            return verifyResult;
          }
          
          return [];
        } catch (error) {
          console.error('Error setting up POR Historical Data:', error instanceof Error ? error.message : String(error));
          return [];
        }
      }
      
      // Run the setup
      setupPorHistoricalData()
        .then(result => {
          console.log(JSON.stringify(result, null, 2));
        })
        .catch(error => {
          console.error('Unhandled error:', error instanceof Error ? error.message : String(error));
        });
    