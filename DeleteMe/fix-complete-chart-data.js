// Script to fix the complete-chart-data.ts file
const fs = require('fs');
const path = require('path');

// File paths
const filePath = path.join(__dirname, '..', 'lib', 'db', 'complete-chart-data.ts');
const backupPath = path.join(__dirname, '..', 'lib', 'db', `complete-chart-data.ts.backup-${new Date().toISOString().replace(/:/g, '-')}`);

console.log('Starting fix script...');

// Create a backup
fs.copyFileSync(filePath, backupPath);
console.log(`Created backup at ${backupPath}`);

// Read the original content
const originalContent = fs.readFileSync(filePath, 'utf8');

// Restore the file structure
let fixedContent = `import type { SpreadsheetRow } from './types';

// This file was auto-generated by the generate-complete-chart-data.js script
// Last updated: ${new Date().toISOString()}

export const initialSpreadsheetData: SpreadsheetRow[] = [
`;

// Extract the data objects from the original file
const dataRegex = /\{\s*"id":\s*"(\d+)"[^}]*\}/g;
const matches = [...originalContent.matchAll(dataRegex)];

console.log(`Found ${matches.length} data objects`);

// Process each data object
matches.forEach((match, index) => {
  const obj = match[0];
  const id = parseInt(match[1], 10);
  const isPOR = id >= 127 && id <= 174;
  
  // Fix SQL expressions
  let fixedObj = obj;
  
  // Fix double GETDATE()
  fixedObj = fixedObj.replace(/GETGETDATE\(\)/g, 'GETDATE()');
  
  // Fix SQL expressions based on database type
  if (isPOR) {
    // POR (MS Access) fixes
    // Remove schema prefixes
    fixedObj = fixedObj.replace(/dbo\./g, '');
    
    // Remove WITH (NOLOCK) hints
    fixedObj = fixedObj.replace(/\s+WITH\s+\(NOLOCK\)/gi, '');
    
    // Ensure it uses Date() for current date
    fixedObj = fixedObj.replace(/GETDATE\(\)/gi, 'Date()');
    
    // Ensure it uses DateAdd/DateDiff with quotes
    fixedObj = fixedObj.replace(/DATEADD\(([a-z]+),/gi, "DateAdd('$1',");
    fixedObj = fixedObj.replace(/DATEDIFF\(([a-z]+),/gi, "DateDiff('$1',");
    
    console.log(`Fixed POR SQL for ID ${id}`);
  } else {
    // P21 (SQL Server) fixes
    // Ensure it has the correct schema prefix
    if (fixedObj.includes('FROM') && !fixedObj.includes('dbo.')) {
      fixedObj = fixedObj.replace(/FROM\s+([a-zA-Z0-9_]+)/gi, 'FROM dbo.$1');
    }
    
    // Ensure it has WITH (NOLOCK) hints
    if (fixedObj.includes('FROM') && !fixedObj.includes('WITH (NOLOCK)')) {
      fixedObj = fixedObj.replace(/FROM\s+dbo\.([a-zA-Z0-9_]+)/gi, 'FROM dbo.$1 WITH (NOLOCK)');
    }
    
    // Ensure it uses GETDATE() for current date
    fixedObj = fixedObj.replace(/Date\(\)/gi, 'GETDATE()');
    
    // Ensure it uses DATEADD/DATEDIFF without quotes
    fixedObj = fixedObj.replace(/DateAdd\('([^']+)'/gi, "DATEADD($1");
    fixedObj = fixedObj.replace(/DateDiff\('([^']+)'/gi, "DATEDIFF($1");
    
    console.log(`Fixed P21 SQL for ID ${id}`);
  }
  
  // Ensure it has 'value' as the alias
  if (fixedObj.includes('SELECT') && !fixedObj.includes(' as value') && !fixedObj.includes(' AS value')) {
    fixedObj = fixedObj.replace(/SELECT\s+([^,]+)(\s+FROM)/i, 'SELECT $1 as value$2');
  }
  
  // Add the object to the fixed content
  fixedContent += `  ${fixedObj}${index < matches.length - 1 ? ',' : ''}\n`;
});

// Close the array
fixedContent += '];';

// Write the fixed content back to the file
fs.writeFileSync(filePath, fixedContent);
console.log(`Fixed file written to ${filePath}`);

console.log('Fix script completed successfully!');
