# PowerShell script to fix the complete-chart-data.ts file
# This script will:
# 1. Remove all duplicated entries
# 2. Ensure all POR entries have the required fields
# 3. Update the SQL expressions with correct MS Access/Jet SQL syntax

$filePath = "C:\Users\BobM\CascadeProjects\TallmanDashboard_new\lib\db\complete-chart-data.ts"
$backupPath = "C:\Users\BobM\CascadeProjects\TallmanDashboard_new\lib\db\complete-chart-data.ts.bak2"
$tempFilePath = "C:\Users\BobM\CascadeProjects\TallmanDashboard_new\lib\db\complete-chart-data.temp.ts"

# Create a backup of the original file
Copy-Item -Path $filePath -Destination $backupPath -Force
Write-Host "Created backup at $backupPath"

# Define the correct MS Access/Jet SQL syntax for each metric type
$newRentalsSql = "SELECT Count(*) as value FROM Transactions WHERE Month(DateCreated) = {0} AND Year(DateCreated) = Year(Date())"
$openRentalsSql = "SELECT Count(*) as value FROM Transactions WHERE TransactionStatus IN ('Open', 'Active', 'Out')"
$openRentalsMonthSql = "SELECT Count(*) as value FROM Transactions WHERE TransactionStatus IN ('Open', 'Active', 'Out') AND Month(DateCreated) = {0}"
$rentalValueSql = "SELECT Sum(TotalAmount) as value FROM Transactions WHERE TransactionStatus IN ('Open', 'Active', 'Out')"
$rentalValueMonthSql = "SELECT Sum(TotalAmount) as value FROM Transactions WHERE TransactionStatus IN ('Open', 'Active', 'Out') AND Month(DateCreated) = {0}"

# Define month mappings
$monthMap = @{
    "Jan" = 1; "Feb" = 2; "Mar" = 3; "Apr" = 4; "May" = 5; "Jun" = 6;
    "Jul" = 7; "Aug" = 8; "Sep" = 9; "Oct" = 10; "Nov" = 11; "Dec" = 12
}

# Read the file line by line to extract the first instance of each unique entry
$lines = Get-Content -Path $filePath
$inDataArray = $false
$currentItem = ""
$uniqueItems = @{}
$uniqueIds = @{}
$processedItems = 0

foreach ($line in $lines) {
    # Check if we're entering the data array
    if ($line -match 'export const initialSpreadsheetData: SpreadsheetRow\[\] = \[') {
        $inDataArray = $true
        continue
    }
    
    # Check if we're exiting the data array
    if ($inDataArray -and $line -match '^\];') {
        $inDataArray = $false
        continue
    }
    
    # Process lines within the data array
    if ($inDataArray) {
        # Add the line to the current item
        $currentItem += "$line`n"
        
        # Check if this is the end of an item
        if ($line -match '^\s*},\s*$') {
            # Extract the ID and DataPoint to use as a unique key
            $id = if ($currentItem -match '"id":\s*"([^"]+)"') { $matches[1] } else { "" }
            $dataPoint = if ($currentItem -match '"DataPoint":\s*"([^"]+)"') { $matches[1] } else { "" }
            $key = "$id-$dataPoint"
            
            # Only keep the first instance of each unique item
            if (-not $uniqueItems.ContainsKey($key) -and $id -ne "" -and $dataPoint -ne "") {
                $uniqueItems[$key] = $currentItem
                $uniqueIds[$id] = $true
                $processedItems++
            }
            
            $currentItem = ""
        }
    }
}

Write-Host "Processed $processedItems items and found $($uniqueItems.Count) unique items"

# Create a new file with the header
$fileHeader = @"
import type { SpreadsheetRow } from './types';

// This file was auto-generated by the fix-complete-chart-data.ps1 script
// Last updated: $(Get-Date -Format "yyyy-MM-ddTHH:mm:ss.fffZ")

export const initialSpreadsheetData: SpreadsheetRow[] = [
"@

Set-Content -Path $tempFilePath -Value $fileHeader

# Process each unique item and update POR entries
$updatedItems = 0
$porItems = 0

foreach ($key in $uniqueItems.Keys) {
    $item = $uniqueItems[$key]
    
    # Check if this is a POR entry
    if ($item -match '"serverName":\s*"POR"') {
        $porItems++
        
        # Ensure all required fields are present
        if (-not ($item -match '"id":\s*"[^"]+"')) {
            $item = $item -replace '{\s*\n', "{\n    `"id`": `"$porItems`",`n"
        }
        
        if (-not ($item -match '"DataPoint":\s*"[^"]+"')) {
            $item = $item -replace '{\s*\n', "{\n    `"DataPoint`": `"POR Item $porItems`",`n"
        }
        
        if (-not ($item -match '"chartGroup":\s*"[^"]+"')) {
            $item = $item -replace '"serverName"', "`"chartGroup`": `"POR Overview`",`n    `"serverName`""
        }
        
        if (-not ($item -match '"variableName":\s*"[^"]+"')) {
            $item = $item -replace '"serverName"', "`"variableName`": `"POR Data`",`n    `"serverName`""
        }
        
        if (-not ($item -match '"value":\s*"[^"]+"')) {
            $item = $item -replace '"serverName"', "`"value`": `"0`",`n    `"serverName`""
        }
        
        if (-not ($item -match '"tableName":\s*"[^"]+"')) {
            $item = $item -replace '"serverName":\s*"POR"', "`"serverName`": `"POR`",`n    `"tableName`": `"Transactions`""
        } else {
            # Update tableName to Transactions if it's Rentals
            $item = $item -replace '"tableName":\s*"Rentals"', '"tableName": "Transactions"'
        }
        
        if (-not ($item -match '"calculation":\s*"[^"]+"')) {
            $item = $item -replace '"tableName"', "`"tableName`": `"Transactions`",`n    `"calculation`": `"number`""
        }
        
        # Extract the DataPoint
        if ($item -match '"DataPoint":\s*"([^"]+)"') {
            $dataPoint = $matches[1]
            
            # Update the SQL expression based on the DataPoint
            if ($dataPoint -match "POR Overview New Rentals, (\w+)") {
                $month = $matches[1]
                $monthNum = $monthMap[$month]
                $sql = $newRentalsSql -f $monthNum
                
                if ($item -match '"productionSqlExpression":\s*"[^"]+"') {
                    $item = $item -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                } else {
                    $item = $item -replace '"calculation":\s*"[^"]+"', "`"calculation`": `"number`",`n    `"productionSqlExpression`": `"$sql`""
                }
            }
            elseif ($dataPoint -match "POR Overview Open Rentals, (\w+)") {
                $month = $matches[1]
                $monthNum = $monthMap[$month]
                $sql = $openRentalsMonthSql -f $monthNum
                
                if ($item -match '"productionSqlExpression":\s*"[^"]+"') {
                    $item = $item -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                } else {
                    $item = $item -replace '"calculation":\s*"[^"]+"', "`"calculation`": `"number`",`n    `"productionSqlExpression`": `"$sql`""
                }
            }
            elseif ($dataPoint -eq "POR Overview Open Rentals") {
                $sql = $openRentalsSql
                
                if ($item -match '"productionSqlExpression":\s*"[^"]+"') {
                    $item = $item -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                } else {
                    $item = $item -replace '"calculation":\s*"[^"]+"', "`"calculation`": `"number`",`n    `"productionSqlExpression`": `"$sql`""
                }
            }
            elseif ($dataPoint -match "POR Overview Rental Value, (\w+)") {
                $month = $matches[1]
                $monthNum = $monthMap[$month]
                $sql = $rentalValueMonthSql -f $monthNum
                
                if ($item -match '"productionSqlExpression":\s*"[^"]+"') {
                    $item = $item -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                } else {
                    $item = $item -replace '"calculation":\s*"[^"]+"', "`"calculation`": `"number`",`n    `"productionSqlExpression`": `"$sql`""
                }
            }
            elseif ($dataPoint -eq "POR Overview Rental Value") {
                $sql = $rentalValueSql
                
                if ($item -match '"productionSqlExpression":\s*"[^"]+"') {
                    $item = $item -replace '"productionSqlExpression":\s*"[^"]+"', "`"productionSqlExpression`": `"$sql`""
                } else {
                    $item = $item -replace '"calculation":\s*"[^"]+"', "`"calculation`": `"number`",`n    `"productionSqlExpression`": `"$sql`""
                }
            }
            else {
                # For other POR entries, just ensure there's a productionSqlExpression field
                if (-not ($item -match '"productionSqlExpression":\s*"[^"]+"')) {
                    $item = $item -replace '"calculation":\s*"[^"]+"', "`"calculation`": `"number`",`n    `"productionSqlExpression`": `"`""
                }
            }
        }
        
        # Update the lastUpdated timestamp
        $timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
        if ($item -match '"lastUpdated":\s*"[^"]+"') {
            $item = $item -replace '"lastUpdated":\s*"[^"]+"', "`"lastUpdated`": `"$timestamp`""
        } else {
            $item = $item -replace '},$', "`n    `"lastUpdated`": `"$timestamp`"`n  },"
        }
        
        $updatedItems++
    }
    
    # Write the item to the new file
    Add-Content -Path $tempFilePath -Value $item
}

# Add the footer
$fileFooter = @"
];

// Export the combined data
export const combinedData = [...initialSpreadsheetData];
"@

Add-Content -Path $tempFilePath -Value $fileFooter

Write-Host "Updated $updatedItems POR entries out of $porItems total POR entries"

# Replace the original file with the new one
Copy-Item -Path $tempFilePath -Destination $filePath -Force
Write-Host "Replaced original file with the fixed version"

# Clean up the temporary file
Remove-Item -Path $tempFilePath
Write-Host "Cleaned up temporary files"

Write-Host "Complete-chart-data.ts has been fixed with proper POR SQL expressions and all required fields!"
